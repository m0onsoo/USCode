# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        #Find midpoint
        fast = head
        slow = head
        while fast and fast.next is not None:
            fast = fast.next.next
            slow = slow.next

        
        #Reverse second part...구글사용해쓰요
        prev = None
        curr = slow.next
        slow.next = None

        while curr is not None:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node

        # prev = head of second half of linked list

        #Merge
        first_head = head
        second_head = prev

        while second_head is not None:
            dum1 = first_head.next
            dum2 = second_head.next
            first_head.next = second_head
            second_head.next = dum1
            first_head = dum1
            second_head = dum2
        
        